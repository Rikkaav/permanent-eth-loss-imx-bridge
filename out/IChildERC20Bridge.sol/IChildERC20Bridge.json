{"abi":[{"type":"function","name":"onMessageReceive","inputs":[{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"privilegedDeposit","inputs":[],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"updateChildBridgeAdaptor","inputs":[{"name":"newBridgeAdaptor","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"withdraw","inputs":[{"name":"childToken","type":"address","internalType":"contract IChildERC20"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"withdrawETH","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"withdrawETHTo","inputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"withdrawIMX","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"withdrawIMXTo","inputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"withdrawTo","inputs":[{"name":"childToken","type":"address","internalType":"contract IChildERC20"},{"name":"receiver","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"withdrawWIMX","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"withdrawWIMXTo","inputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"onMessageReceive(bytes)":"7248c77c","privilegedDeposit()":"18428c50","updateChildBridgeAdaptor(address)":"0765c405","withdraw(address,uint256)":"f3fef3a3","withdrawETH(uint256)":"f14210a6","withdrawETHTo(address,uint256)":"697b894a","withdrawIMX(uint256)":"de65c2e4","withdrawIMXTo(address,uint256)":"92ffd2e2","withdrawTo(address,address,uint256)":"c3b35a7e","withdrawWIMX(uint256)":"52b61e36","withdrawWIMXTo(address,uint256)":"274346b9"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onMessageReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privilegedDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBridgeAdaptor\",\"type\":\"address\"}],\"name\":\"updateChildBridgeAdaptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChildERC20\",\"name\":\"childToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETHTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawIMX\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawIMXTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChildERC20\",\"name\":\"childToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawWIMX\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawWIMXTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Features:  - Withdraw already bridged tokens from the child chain to the root chain.  - Withdraw native IMX from the child chain to the root chain.  - Withdraw wrapped IMX from the child chain to the root chain.  - Withdraw wrapped ETH from the child chain to the root chain.\",\"kind\":\"dev\",\"methods\":{\"onMessageReceive(bytes)\":{\"details\":\"This function is called by the underlying bridge adaptor on the child chain, when it receives a validated message from the GMP.\",\"params\":{\"data\":\"The data payload of the message.\"}},\"privilegedDeposit()\":{\"details\":\"This function can only be called by callers who have the PRIVILEGED_DEPOSITOR_ROLE.\"},\"updateChildBridgeAdaptor(address)\":{\"params\":{\"newBridgeAdaptor\":\"The new child chain bridge adaptor address.\"}},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to withdraw.\",\"childToken\":\"The address of the child token to withdraw.\"}},\"withdrawETH(uint256)\":{\"params\":{\"amount\":\"The amount of ETH to withdraw.\"}},\"withdrawETHTo(address,uint256)\":{\"params\":{\"amount\":\"The amount of ETH to withdraw.\",\"receiver\":\"The address to withdraw the ETH to.\"}},\"withdrawIMX(uint256)\":{\"params\":{\"amount\":\"The amount of IMX to withdraw.\"}},\"withdrawIMXTo(address,uint256)\":{\"params\":{\"amount\":\"The amount of IMX to withdraw.\",\"receiver\":\"The address to withdraw the IMX to.\"}},\"withdrawTo(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to withdraw.\",\"childToken\":\"The address of the child token to withdraw.\",\"receiver\":\"The address to withdraw the tokens to.\"}},\"withdrawWIMX(uint256)\":{\"params\":{\"amount\":\"The amount of wrapped IMX to withdraw.\"}},\"withdrawWIMXTo(address,uint256)\":{\"params\":{\"amount\":\"The amount of wrapped IMX to withdraw.\",\"receiver\":\"The address to withdraw the wrapped IMX to.\"}}},\"title\":\"Child ERC20 Bridge Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onMessageReceive(bytes)\":{\"notice\":\"Receives a bridge message from the root chain.\"},\"privilegedDeposit()\":{\"notice\":\"Deposit native IMX to the child chain bridge contract.\"},\"updateChildBridgeAdaptor(address)\":{\"notice\":\"Sets a new bridge adaptor address to receive and send function calls for L1 messages\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraws `amount` of `childToken` to `msg.sender` on the rootchain.\"},\"withdrawETH(uint256)\":{\"notice\":\"Withdraws `amount` of ETH to `msg.sender` on the rootchain.\"},\"withdrawETHTo(address,uint256)\":{\"notice\":\"Withdraws `amount` of ETH to `receiver` on the rootchain.\"},\"withdrawIMX(uint256)\":{\"notice\":\"Withdraws `amount` of IMX to `msg.sender` on the rootchain.\"},\"withdrawIMXTo(address,uint256)\":{\"notice\":\"Withdraws `amount` of IMX to `receiver` on the rootchain.\"},\"withdrawTo(address,address,uint256)\":{\"notice\":\"Withdraws `amount` of `childToken` to `receiver` on the rootchain.\"},\"withdrawWIMX(uint256)\":{\"notice\":\"Withdraws `amount` of wrapped IMX to `msg.sender` on the rootchain.\"},\"withdrawWIMXTo(address,uint256)\":{\"notice\":\"Withdraws `amount` of wrapped IMX to `receiver` on the rootchain.\"}},\"notice\":\"Defines the key functions of an ERC20 bridge on the child chain, which enables bridging of standard ERC20 tokens, ETH, wETH, IMX and wIMX from the root chain to the child chain and back.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/child/IChildERC20Bridge.sol\":\"IChildERC20Bridge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@axelar-cgp-solidity/=lib/axelar-cgp-solidity/\",\":@axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/\",\":@axelar-network/axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@perimetersec/fuzzlib/src/=node_modules/@perimetersec/fuzzlib/src/\",\":axelar-cgp-solidity/=lib/axelar-cgp-solidity/contracts/\",\":axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f\",\"dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"src/interfaces/child/IChildERC20.sol\":{\"keccak256\":\"0x51669da1e86c8e2c3553fd2092ba5457a8ecee91f1aeb78bbb201fc2428b2ac4\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://dc98a38c632913e123441b0f1b2b43e5e88baf6c574844f2e1e2b7bf53d9b737\",\"dweb:/ipfs/Qmf92nf9KSS1DaQ3UQcUz7j3wyZ48QyBFz4LfYFb3ukpFS\"]},\"src/interfaces/child/IChildERC20Bridge.sol\":{\"keccak256\":\"0x697cee10797ae8b80914f6243ed4693ec6c8a296b66b8dddb113ad98f7b00b99\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://77eab9f1c814ee910d87fa199e88c5e014e74af40f3f537150bf011f9ee911df\",\"dweb:/ipfs/QmRu1txeizhWxr76rFhWbUFUfB3QtruLpBKSxRMYkX8EQz\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.19+commit.7dd6d404"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onMessageReceive"},{"inputs":[],"stateMutability":"payable","type":"function","name":"privilegedDeposit"},{"inputs":[{"internalType":"address","name":"newBridgeAdaptor","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"updateChildBridgeAdaptor"},{"inputs":[{"internalType":"contract IChildERC20","name":"childToken","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"payable","type":"function","name":"withdraw"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"payable","type":"function","name":"withdrawETH"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"payable","type":"function","name":"withdrawETHTo"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"payable","type":"function","name":"withdrawIMX"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"payable","type":"function","name":"withdrawIMXTo"},{"inputs":[{"internalType":"contract IChildERC20","name":"childToken","type":"address"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"payable","type":"function","name":"withdrawTo"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"payable","type":"function","name":"withdrawWIMX"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"payable","type":"function","name":"withdrawWIMXTo"}],"devdoc":{"kind":"dev","methods":{"onMessageReceive(bytes)":{"details":"This function is called by the underlying bridge adaptor on the child chain, when it receives a validated message from the GMP.","params":{"data":"The data payload of the message."}},"privilegedDeposit()":{"details":"This function can only be called by callers who have the PRIVILEGED_DEPOSITOR_ROLE."},"updateChildBridgeAdaptor(address)":{"params":{"newBridgeAdaptor":"The new child chain bridge adaptor address."}},"withdraw(address,uint256)":{"params":{"amount":"The amount of tokens to withdraw.","childToken":"The address of the child token to withdraw."}},"withdrawETH(uint256)":{"params":{"amount":"The amount of ETH to withdraw."}},"withdrawETHTo(address,uint256)":{"params":{"amount":"The amount of ETH to withdraw.","receiver":"The address to withdraw the ETH to."}},"withdrawIMX(uint256)":{"params":{"amount":"The amount of IMX to withdraw."}},"withdrawIMXTo(address,uint256)":{"params":{"amount":"The amount of IMX to withdraw.","receiver":"The address to withdraw the IMX to."}},"withdrawTo(address,address,uint256)":{"params":{"amount":"The amount of tokens to withdraw.","childToken":"The address of the child token to withdraw.","receiver":"The address to withdraw the tokens to."}},"withdrawWIMX(uint256)":{"params":{"amount":"The amount of wrapped IMX to withdraw."}},"withdrawWIMXTo(address,uint256)":{"params":{"amount":"The amount of wrapped IMX to withdraw.","receiver":"The address to withdraw the wrapped IMX to."}}},"version":1},"userdoc":{"kind":"user","methods":{"onMessageReceive(bytes)":{"notice":"Receives a bridge message from the root chain."},"privilegedDeposit()":{"notice":"Deposit native IMX to the child chain bridge contract."},"updateChildBridgeAdaptor(address)":{"notice":"Sets a new bridge adaptor address to receive and send function calls for L1 messages"},"withdraw(address,uint256)":{"notice":"Withdraws `amount` of `childToken` to `msg.sender` on the rootchain."},"withdrawETH(uint256)":{"notice":"Withdraws `amount` of ETH to `msg.sender` on the rootchain."},"withdrawETHTo(address,uint256)":{"notice":"Withdraws `amount` of ETH to `receiver` on the rootchain."},"withdrawIMX(uint256)":{"notice":"Withdraws `amount` of IMX to `msg.sender` on the rootchain."},"withdrawIMXTo(address,uint256)":{"notice":"Withdraws `amount` of IMX to `receiver` on the rootchain."},"withdrawTo(address,address,uint256)":{"notice":"Withdraws `amount` of `childToken` to `receiver` on the rootchain."},"withdrawWIMX(uint256)":{"notice":"Withdraws `amount` of wrapped IMX to `msg.sender` on the rootchain."},"withdrawWIMXTo(address,uint256)":{"notice":"Withdraws `amount` of wrapped IMX to `receiver` on the rootchain."}},"version":1}},"settings":{"remappings":["@axelar-cgp-solidity/=lib/axelar-cgp-solidity/","@axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/","@axelar-network/axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@perimetersec/fuzzlib/src/=node_modules/@perimetersec/fuzzlib/src/","axelar-cgp-solidity/=lib/axelar-cgp-solidity/contracts/","axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/child/IChildERC20Bridge.sol":"IChildERC20Bridge"},"evmVersion":"paris","libraries":{}},"sources":{"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol":{"keccak256":"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f","urls":["bzz-raw://c25f742ff154998d19a669e2508c3597b363e123ce9144cd0fcf6521229f401f","dweb:/ipfs/QmQXRuFzStEWqeEPbhQU6cAg9PaSowxJVo4PDKyRod7dco"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol":{"keccak256":"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb","urls":["bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d","dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ"],"license":"MIT"},"src/interfaces/child/IChildERC20.sol":{"keccak256":"0x51669da1e86c8e2c3553fd2092ba5457a8ecee91f1aeb78bbb201fc2428b2ac4","urls":["bzz-raw://dc98a38c632913e123441b0f1b2b43e5e88baf6c574844f2e1e2b7bf53d9b737","dweb:/ipfs/Qmf92nf9KSS1DaQ3UQcUz7j3wyZ48QyBFz4LfYFb3ukpFS"],"license":"Apache 2.0"},"src/interfaces/child/IChildERC20Bridge.sol":{"keccak256":"0x697cee10797ae8b80914f6243ed4693ec6c8a296b66b8dddb113ad98f7b00b99","urls":["bzz-raw://77eab9f1c814ee910d87fa199e88c5e014e74af40f3f537150bf011f9ee911df","dweb:/ipfs/QmRu1txeizhWxr76rFhWbUFUfB3QtruLpBKSxRMYkX8EQz"],"license":"Apache 2.0"}},"version":1},"id":61}