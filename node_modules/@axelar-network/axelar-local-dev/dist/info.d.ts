export declare const mainnetInfo: {
    ethereum: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                collector: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
    };
    avalanche: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                collector: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
    };
    fantom: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                collector: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
        gasOptions: {
            gasLimit: number;
        };
    };
    polygon: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                collector: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
        gasOptions: {
            gasLimit: number;
        };
    };
    moonbeam: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                collector: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
    };
    binance: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        wrappedSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                collector: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
    };
    arbitrum: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                collector: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
        gasOptions: {
            gasLimit: number;
        };
    };
    celo: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                collector: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
    };
    kava: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                collector: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
    };
    filecoin: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
                implementation: string;
                authModule: string;
                tokenDeployer: string;
                deployer: string;
            };
            AxelarGasService: {
                salt: string;
                collector: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
        };
        gasOptions: {
            gasLimit: number;
        };
    };
    optimism: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
                implementation: string;
                authModule: string;
                tokenDeployer: string;
                deployer: string;
            };
            AxelarGasService: {
                salt: string;
                collector: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
        gasOptions: {
            gasLimit: number;
        };
        confirmations: number;
    };
    linea: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
                implementation: string;
                authModule: string;
                tokenDeployer: string;
                deployer: string;
            };
            AxelarGasService: {
                collector: string;
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            AxelarDepositService: {
                wrappedSymbol: string;
                refundIssuer: string;
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
    };
    base: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
                implementation: string;
                authModule: string;
                tokenDeployer: string;
                deployer: string;
            };
            AxelarGasService: {
                collector: string;
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            AxelarDepositService: {
                wrappedSymbol: string;
                refundIssuer: string;
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
    };
    mantle: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                deployer: string;
                address: string;
                implementation: string;
                authModule: string;
                tokenDeployer: string;
            };
            AxelarGasService: {
                collector: string;
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            AxelarDepositService: {
                wrappedSymbol: string;
                refundIssuer: string;
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
        gasOptions: {
            gasLimit: number;
        };
        skipRevertTests: boolean;
    };
};
export declare const testnetInfo: {
    ethereum: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                collector: string;
                owner: string;
            };
            AxelarDepositService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                wrappedSymbol: string;
                refundIssuer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                salt: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
            };
            InterchainTokenService: {
                gasOptions: {
                    gasLimit: number;
                };
                salt: string;
                deployer: string;
                tokenManagerDeployer: string;
                standardizedTokenLockUnlock: string;
                standardizedTokenMintBurn: string;
                standardizedTokenDeployer: string;
                remoteAddressValidatorImplementation: string;
                remoteAddressValidator: string;
                tokenManagerImplementations: {
                    tokenManagerLockUnlock: string;
                    tokenManagerMintBurn: string;
                    tokenManagerLiquidityPool: string;
                };
                implementation: string;
                address: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            Operators: {
                owner: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
    };
    avalanche: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                collector: string;
                owner: string;
            };
            AxelarDepositService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                wrappedSymbol: string;
                refundIssuer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                salt: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
            };
            InterchainTokenService: {
                gasOptions: {
                    gasLimit: number;
                };
                salt: string;
                deployer: string;
                tokenManagerDeployer: string;
                standardizedTokenLockUnlock: string;
                standardizedTokenMintBurn: string;
                standardizedTokenDeployer: string;
                remoteAddressValidatorImplementation: string;
                remoteAddressValidator: string;
                tokenManagerImplementations: {
                    tokenManagerLockUnlock: string;
                    tokenManagerMintBurn: string;
                    tokenManagerLiquidityPool: string;
                };
                implementation: string;
                address: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            Operators: {
                owner: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
    };
    fantom: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
                gasOptions: {
                    gasLimit: number;
                };
            };
            AxelarGasService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                collector: string;
                owner: string;
            };
            AxelarDepositService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                wrappedSymbol: string;
                refundIssuer: string;
                gasOptions: {
                    gasLimit: number;
                };
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                salt: string;
                deployer: string;
                address: string;
                deploymentMethod: string;
            };
            InterchainTokenService: {
                gasOptions: {
                    gasLimit: number;
                };
                salt: string;
                deployer: string;
                tokenManagerDeployer: string;
                standardizedTokenLockUnlock: string;
                standardizedTokenMintBurn: string;
                standardizedTokenDeployer: string;
                remoteAddressValidatorImplementation: string;
                remoteAddressValidator: string;
                tokenManagerImplementations: {
                    tokenManagerLockUnlock: string;
                    tokenManagerMintBurn: string;
                    tokenManagerLiquidityPool: string;
                };
                implementation: string;
                address: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            Operators: {
                owner: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
        gasOptions: {
            gasLimit: number;
        };
    };
    polygon: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                collector: string;
                owner: string;
            };
            AxelarDepositService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                wrappedSymbol: string;
                refundIssuer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                salt: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
            };
            InterchainTokenService: {
                gasOptions: {
                    gasLimit: number;
                };
                salt: string;
                deployer: string;
                tokenManagerDeployer: string;
                standardizedTokenLockUnlock: string;
                standardizedTokenMintBurn: string;
                standardizedTokenDeployer: string;
                remoteAddressValidatorImplementation: string;
                remoteAddressValidator: string;
                tokenManagerImplementations: {
                    tokenManagerLockUnlock: string;
                    tokenManagerMintBurn: string;
                    tokenManagerLiquidityPool: string;
                };
                implementation: string;
                address: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            Operators: {
                owner: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
        gasOptions: {
            gasLimit: number;
        };
    };
    moonbeam: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                collector: string;
                owner: string;
            };
            AxelarDepositService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                wrappedSymbol: string;
                refundIssuer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                salt: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
            };
            InterchainTokenService: {
                gasOptions: {
                    gasLimit: number;
                };
                salt: string;
                deployer: string;
                tokenManagerDeployer: string;
                standardizedTokenLockUnlock: string;
                standardizedTokenMintBurn: string;
                standardizedTokenDeployer: string;
                remoteAddressValidatorImplementation: string;
                remoteAddressValidator: string;
                tokenManagerImplementations: {
                    tokenManagerLockUnlock: string;
                    tokenManagerMintBurn: string;
                    tokenManagerLiquidityPool: string;
                };
                implementation: string;
                address: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            Operators: {
                owner: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
        gasOptions: {
            gasLimit: number;
        };
    };
    binance: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                collector: string;
                owner: string;
            };
            AxelarDepositService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                wrappedSymbol: string;
                refundIssuer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                salt: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
            };
            InterchainTokenService: {
                gasOptions: {
                    gasLimit: number;
                };
                salt: string;
                deployer: string;
                tokenManagerDeployer: string;
                standardizedTokenLockUnlock: string;
                standardizedTokenMintBurn: string;
                standardizedTokenDeployer: string;
                remoteAddressValidatorImplementation: string;
                remoteAddressValidator: string;
                tokenManagerImplementations: {
                    tokenManagerLockUnlock: string;
                    tokenManagerMintBurn: string;
                    tokenManagerLiquidityPool: string;
                };
                implementation: string;
                address: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            Operators: {
                owner: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
    };
    arbitrum: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                collector: string;
                address: string;
                implementation: string;
                deployer: string;
                owner: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            gasOptions: {
                gasLimit: number;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                salt: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
            };
            InterchainTokenService: {
                salt: string;
                deployer: string;
                tokenManagerDeployer: string;
                standardizedTokenLockUnlock: string;
                standardizedTokenMintBurn: string;
                standardizedTokenDeployer: string;
                remoteAddressValidatorImplementation: string;
                remoteAddressValidator: string;
                tokenManagerImplementations: {
                    tokenManagerLockUnlock: string;
                    tokenManagerMintBurn: string;
                    tokenManagerLiquidityPool: string;
                };
                implementation: string;
                address: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            Operators: {
                owner: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
    };
    celo: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
                collector: string;
                owner: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                salt: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
            };
            InterchainTokenService: {
                salt: string;
                deployer: string;
                tokenManagerDeployer: string;
                standardizedTokenLockUnlock: string;
                standardizedTokenMintBurn: string;
                standardizedTokenDeployer: string;
                remoteAddressValidatorImplementation: string;
                remoteAddressValidator: string;
                tokenManagerImplementations: {
                    tokenManagerLockUnlock: string;
                    tokenManagerMintBurn: string;
                    tokenManagerLiquidityPool: string;
                };
                implementation: string;
                address: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            Operators: {
                owner: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
        gasOptions: {
            gasLimit: number;
        };
    };
    kava: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                collector: string;
                address: string;
                implementation: string;
                deployer: string;
                owner: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                salt: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
            };
            InterchainTokenService: {
                gasOptions: {
                    gasLimit: number;
                };
                salt: string;
                deployer: string;
                standardizedTokenLockUnlock: string;
                standardizedTokenMintBurn: string;
                tokenManagerDeployer: string;
                standardizedTokenDeployer: string;
                remoteAddressValidatorImplementation: string;
                remoteAddressValidator: string;
                tokenManagerImplementations: {
                    tokenManagerLockUnlock: string;
                    tokenManagerMintBurn: string;
                    tokenManagerLiquidityPool: string;
                };
                implementation: string;
                address: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            Operators: {
                owner: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
        };
    };
    optimism: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                collector: string;
                address: string;
                implementation: string;
                deployer: string;
                owner: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                salt: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
            };
            InterchainTokenService: {
                gasOptions: {
                    gasLimit: number;
                };
                salt: string;
                deployer: string;
                tokenManagerDeployer: string;
                standardizedTokenLockUnlock: string;
                standardizedTokenMintBurn: string;
                standardizedTokenDeployer: string;
                remoteAddressValidatorImplementation: string;
                remoteAddressValidator: string;
                tokenManagerImplementations: {
                    tokenManagerLockUnlock: string;
                    tokenManagerMintBurn: string;
                    tokenManagerLiquidityPool: string;
                };
                implementation: string;
                address: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            Operators: {
                owner: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
        gasOptions: {
            gasLimit: number;
        };
        confirmations: number;
    };
    base: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
            };
            AxelarGasService: {
                salt: string;
                collector: string;
                address: string;
                implementation: string;
                deployer: string;
                owner: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                salt: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
            };
            InterchainTokenService: {
                gasOptions: {
                    gasLimit: number;
                };
                salt: string;
                deployer: string;
                tokenManagerDeployer: string;
                standardizedTokenLockUnlock: string;
                standardizedTokenMintBurn: string;
                standardizedTokenDeployer: string;
                remoteAddressValidatorImplementation: string;
                remoteAddressValidator: string;
                tokenManagerImplementations: {
                    tokenManagerLockUnlock: string;
                    tokenManagerMintBurn: string;
                    tokenManagerLiquidityPool: string;
                };
                implementation: string;
                address: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            Operators: {
                owner: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
        gasOptions: {
            gasLimit: number;
        };
    };
    filecoin: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            ConstAddressDeployer: {
                address: string;
            };
            AxelarGateway: {
                address: string;
                implementation: string;
                authModule: string;
                tokenDeployer: string;
                deployer: string;
            };
            AxelarGasService: {
                collector: string;
                address: string;
                implementation: string;
                deployer: string;
                owner: string;
            };
            AxelarDepositService: {
                wrappedSymbol: string;
                refundIssuer: string;
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            Create3Deployer: {
                salt: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
            };
            InterchainTokenService: {
                salt: string;
                deployer: string;
                tokenManagerDeployer: string;
                standardizedTokenLockUnlock: string;
                standardizedTokenMintBurn: string;
                standardizedTokenDeployer: string;
                remoteAddressValidatorImplementation: string;
                remoteAddressValidator: string;
                tokenManagerImplementations: {
                    tokenManagerLockUnlock: string;
                    tokenManagerMintBurn: string;
                    tokenManagerLiquidityPool: string;
                };
                implementation: string;
                address: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            Operators: {
                owner: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
        };
        gasOptions: {
            gasLimit: number;
        };
        confirmations: number;
    };
    linea: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                address: string;
                implementation: string;
                authModule: string;
                tokenDeployer: string;
                deployer: string;
            };
            AxelarGasService: {
                salt: string;
                collector: string;
                deployer: string;
                address: string;
                implementation: string;
                owner: string;
            };
            AxelarDepositService: {
                salt: string;
                wrappedSymbol: string;
                refundIssuer: string;
                deployer: string;
                address: string;
                implementation: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                salt: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
            };
            InterchainTokenService: {
                salt: string;
                deployer: string;
                tokenManagerDeployer: string;
                standardizedTokenLockUnlock: string;
                standardizedTokenMintBurn: string;
                standardizedTokenDeployer: string;
                remoteAddressValidatorImplementation: string;
                remoteAddressValidator: string;
                tokenManagerImplementations: {
                    tokenManagerLockUnlock: string;
                    tokenManagerMintBurn: string;
                    tokenManagerLiquidityPool: string;
                };
                implementation: string;
                address: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            Operators: {
                owner: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
    };
    "polygon-zkevm": {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            ConstAddressDeployer: {
                address: string;
            };
            AxelarGateway: {
                address: string;
                implementation: string;
                authModule: string;
                tokenDeployer: string;
                deployer: string;
            };
            AxelarGasService: {
                collector: string;
                address: string;
                implementation: string;
                deployer: string;
                owner: string;
            };
            AxelarDepositService: {
                wrappedSymbol: string;
                refundIssuer: string;
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            Create3Deployer: {
                salt: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
            };
            InterchainTokenService: {
                gasOptions: {
                    gasLimit: number;
                };
                salt: string;
                deployer: string;
                tokenManagerDeployer: string;
                standardizedTokenLockUnlock: string;
                standardizedTokenMintBurn: string;
                standardizedTokenDeployer: string;
                remoteAddressValidatorImplementation: string;
                remoteAddressValidator: string;
                tokenManagerImplementations: {
                    tokenManagerLockUnlock: string;
                    tokenManagerMintBurn: string;
                    tokenManagerLiquidityPool: string;
                };
                implementation: string;
                address: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            Operators: {
                owner: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
        confirmations: number;
    };
    mantle: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                deployer: string;
                address: string;
                implementation: string;
                authModule: string;
                tokenDeployer: string;
            };
            AxelarGasService: {
                collector: string;
                address: string;
                implementation: string;
                deployer: string;
                owner: string;
            };
            AxelarDepositService: {
                wrappedSymbol: string;
                refundIssuer: string;
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Create3Deployer: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            InterchainProposalSender: {
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
            Operators: {
                owner: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
        gasOptions: {
            gasLimit: number;
        };
        skipRevertTests: boolean;
    };
    centrifuge: {
        name: string;
        id: string;
        chainId: number;
        rpc: string;
        tokenSymbol: string;
        contracts: {
            AxelarGateway: {
                deployer: string;
                address: string;
                implementation: string;
                authModule: string;
                tokenDeployer: string;
            };
            AxelarGasService: {
                collector: string;
                address: string;
                implementation: string;
                deployer: string;
                owner: string;
            };
            AxelarDepositService: {
                wrappedSymbol: string;
                refundIssuer: string;
                salt: string;
                address: string;
                implementation: string;
                deployer: string;
            };
            ConstAddressDeployer: {
                address: string;
            };
            Operators: {
                owner: string;
                address: string;
                deployer: string;
                deploymentMethod: string;
                salt: string;
            };
        };
        explorer: {
            url: string;
            api: string;
        };
        gasOptions: {
            gasLimit: number;
        };
    };
};
//# sourceMappingURL=info.d.ts.map