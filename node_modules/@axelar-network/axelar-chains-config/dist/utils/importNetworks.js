var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * Imports custom networks into hardhat config format.
 * Check out the example hardhat config for usage `.example.hardhat.config.js`.
 *
 * @param {Object[]} chains - Array of chain objects following the format in info/mainnet.json
 * @param {Object} keys - Object containing keys for contract verification and accounts
 * @returns {Object} - Object containing networks and etherscan config
 */
var importNetworks = function (chains, keys) {
    var networks = {
        hardhat: {
            chainId: 31337,
            id: 'hardhat',
            confirmations: 1,
        },
    };
    var etherscan = {
        apiKey: {},
        customChains: [],
    };
    if (!chains.chains) {
        // Use new format
        delete chains.chains;
        chains = {
            chains: chains,
        };
    }
    // Add custom networks
    Object.entries(chains.chains).forEach(function (_a) {
        var _b, _c, _d, _e;
        var chainName = _a[0], chain = _a[1];
        var name = chainName.toLowerCase();
        networks[name] = __assign(__assign({}, chain), { url: chain.rpc, blockGasLimit: (_b = chain.gasOptions) === null || _b === void 0 ? void 0 : _b.gasLimit });
        if (keys) {
            networks[name].accounts = keys.accounts || ((_c = keys.chains[name]) === null || _c === void 0 ? void 0 : _c.accounts);
        }
        // Add contract verification keys
        if ((_d = chain.explorer) === null || _d === void 0 ? void 0 : _d.api) {
            if (keys) {
                etherscan.apiKey[name] = (_e = keys.chains[name]) === null || _e === void 0 ? void 0 : _e.api;
            }
            etherscan.customChains.push({
                network: name,
                chainId: chain.chainId,
                urls: {
                    apiURL: chain.explorer.api,
                    browserURL: chain.explorer.url,
                },
            });
        }
    });
    return { networks: networks, etherscan: etherscan };
};
module.exports = {
    importNetworks: importNetworks,
};
